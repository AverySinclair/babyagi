import openai
import json
from ai_responses import get_ada_embedding, openai_call
from colorama import Fore


class TaskAgent:
    def __init__(self, objective, task_name=None, task_type=None, 
                 model='gpt-3.5-turbo', model_temp=0.3, 
                 context=None, feedback=None, result=None, debug=False):
        self.objective = objective
        self.task_name = task_name
        self.task_type = task_type
        self.model = model
        self.model_temp = model_temp
        self.context = context
        self.feedback = feedback
        self.result = result
        self.debug = debug
    

    def complete_task(self):
        """
        Runs agents to complete the current task

        Returns:
            str: The text obtained from completing the task
        """

        manager_comment = ''
        # try 5 times to complete the task
        for i in range(5):
            task_execution = self.execute_task()
            manager_feedback = self.get_feedback(json.dumps(task_execution))
            task_status = manager_feedback['task_status']
            manager_comment = manager_feedback['task_feedback']

            if task_status == 'COMPLETE':
                print(Fore.GREEN + f'COMPLETED: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
                break
            elif task_status == 'IMPOSSIBLE':
                print(Fore.RED + f'IMPOSSIBLE: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
                self.result = f'Task skipped. {manager_comment}'
                break
            else:
                print(Fore.YELLOW + f'INCOMPLETE: {self.task_name}\n>> Manager feedback: {manager_comment}'+Fore.RESET)
        
        return task_status


    def execute_task(self) -> dict:
        """
        Executes a task as part of a larger objective, taking into account context and feedback received

        Returns:
            dict: The response generated by the AI for the given task.
        """
        
        prompt = f"""You are an AI who performs one task based on the following objective: {self.objective}.
        Your task to complete: {self.task_name}
        """
        if self.context: 
            prompt += f'Here are some already-completed tasks for context: {self.context}\n'
        if self.feedback and self.result:
            prompt += f"""Your previous attempt was rejected by your manager:
            {self.result}
            Your manager gave you this feedback: {self.feedback}"""
        
        prompt += """
        Respond with a JSON object structured:
        {
            work_product: '<the result of the given task>', 
            agent_comment: '<brief comment for your manager>'
        }
        Do not include anything but the JSON object in your response.
        Response:"""
        if self.debug:
            print(f'EXECUTION AGENT PROMPT:\n{prompt}')
        text_response = openai_call(prompt, model=self.model, temperature=self.model_temp, max_tokens=1800)
        try:
            agent_response = json.loads(text_response)
            self.result = str(agent_response['work_product'])
        except json.decoder.JSONDecodeError as e:
            print(f"JSON parse failed! Received test:\n{text_response}")
            self.result = text_response
            self.feedback = str(e)
            return self.execute_task()
        
        return agent_response


    def get_feedback(self, agent_output):
        """
        Sends agent task execution result to a "manager" and offers feedback

        Returns:
            dict: The response generated by the AI.
        """
        
        prompt = f"""You are a management AI who manages task-executing AI agents with the ultimate objective: {self.objective}
        Your subordinate just submitted their work for the task: {self.task_name}
        """ + (f'Here are some already-completed tasks: {self.context}\n' if self.context else '') + f"""
        Agent's output:'''
        {agent_output}'''
        Respond with a JSON array in the following format:"""+"""'''
        {
            task_feedback: '<Feedback on agent's attempt to complete the task>',
            task_status: '<COMPLETE|INCOMPLETE|IMPOSSIBLE>'
        }'''
        Do not include anything but the JSON object in your response.
        Response:"""

        if self.debug:
            print(f"Manager's feedback:\n{prompt}")
        
        response = openai_call(prompt, model=self.model, temperature=self.model_temp, max_tokens=300)
        try:
            manager_response = json.loads(response)
        except json.decoder.JSONDecodeError as e:
            print(f'Failure to load JSON from:\n{response}')
            raise e
        
        self.feedback = manager_response['task_feedback']
        
        return manager_response
    


